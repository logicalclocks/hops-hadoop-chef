
com.mysql.clusterj.connectstring = <%= @ndb_connectstring %> 
com.mysql.clusterj.database = <%= node['hops']['db'] %>
com.mysql.clusterj.connection.pool.size = <%= node['ndb']['num_ndb_slots_per_client'] %>
com.mysql.clusterj.max.transactions = 1024

#determines the number of seconds to wait until the first “live” node is detected.
#If this amount of time is exceeded with no live nodes detected,
#then the method immediately returns a negative value. Default=30
com.mysql.clusterj.connect.timeout.before=30

#determines the number of seconds to wait after the first “live” node is 
#detected for all nodes to become active. If this amount of time is exceeded
#without all nodes becoming active, then the method immediately returns a 
#value greater than zero. Default=20
com.mysql.clusterj.connect.timeout.after=20

#The number of seconds to wait for all sessions to be closed when reconnecting a SessionFactory
#due to network failures. The default, 0, indicates that the automatic reconnection to the cluster
#due to network failures is disabled. Reconnection can be enabled by using the method
#SessionFactory.reconnect(int timeout) and specifying a new timeout value. 
com.mysql.clusterj.connection.reconnect.timeout=5

#clusterj caching
#set io.hops.enable.clusterj.dto.cache and io.hops.enable.clusterj.session.cache to use dto and session caching provided by clusterj
io.hops.enable.clusterj.dto.cache=<%= node['hops']['clusterj']['enable_dto_cache'] %>
io.hops.enable.clusterj.session.cache=<%= node['hops']['clusterj']['enable_session_cache'] %>

com.mysql.clusterj.max.cached.instances=256
com.mysql.clusterj.max.cached.sessions=0
com.mysql.clusterj.warmup.cached.sessions=0

io.hops.metadata.ndb.mysqlserver.data_source_class_name = com.mysql.cj.jdbc.MysqlDataSource
io.hops.metadata.ndb.mysqlserver.host = 127.0.0.1
io.hops.metadata.ndb.mysqlserver.port = <%= node['ndb']['mysql_port'] %>
io.hops.metadata.ndb.mysqlserver.username = <%= node['mysql']['user'] %>
io.hops.metadata.ndb.mysqlserver.password = <%= node['mysql']['password'] %>
io.hops.metadata.ndb.mysqlserver.connection_pool_size = 10
io.hops.metadata.ndb.mysqlserver.useSSL = <%= node['hops']['mysql']['useSSL'] %>

#size of the session pool. should be altreat as big as the number of active Tx in the system
io.hops.session.pool.size = <%= node['hops']['clusterj']['max_sessions'] %>
#Session is reused n times and then it is GCed
io.hops.session.reuse.count = <%= node['hops']['clusterj']['session_max_reuse_count'] %>

