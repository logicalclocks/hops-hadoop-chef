<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="configuration.xsl"?>

<!-- Put site-specific property overrides in this file. -->

<configuration>

  <property>
    <name>dfs.replication</name>
    <value><%= node['hops']['num_replicas'] %></value>
    <description>Default block replication.
    The actual number of replications can be specified when the file is created.
    The default is used if replication is not specified in create time.
    </description>
  </property>

  <property>
    <name>dfs.namenode.rpc-bind-host</name>
    <value><%= @bind_ip %></value>
    <description>
      The actual address the RPC server will bind to. If this optional address is
      set, it overrides only the hostname portion of dfs.namenode.rpc-address.
      It can also be specified per name node or name service for HA/Federation.
      This is useful for making the name node listen on all interfaces by
      setting it to 0.0.0.0.
    </description>
  </property>

  <property>
    <name>dfs.namenode.servicerpc-bind-host</name>
    <value><%= @bind_ip %></value>
    <description>
      The actual address the service RPC server will bind to. If this optional address is
      set, it overrides only the hostname portion of dfs.namenode.servicerpc-address.
      It can also be specified per name node or name service for HA/Federation.
      This is useful for making the name node listen on all interfaces by
      setting it to 0.0.0.0.
    </description>
  </property>

  <property>
    <name>dfs.namenode.http-bind-host</name>
    <value><%= @bind_ip %></value>
    <description>
      The actual adress the HTTP server will bind to. If this optional address
      is set, it overrides only the hostname portion of dfs.namenode.http-address.
      It can also be specified per name node or name service for HA/Federation.
      This is useful for making the name node HTTP server listen on all
      interfaces by setting it to 0.0.0.0.
    </description>
  </property>

  <property>
    <name>dfs.namenode.https-bind-host</name>
    <value><%= @bind_ip %></value>
    <description>
      The actual adress the HTTPS server will bind to. If this optional address
      is set, it overrides only the hostname portion of dfs.namenode.https-address.
      It can also be specified per name node or name service for HA/Federation.
      This is useful for making the name node HTTPS server listen on all
      interfaces by setting it to 0.0.0.0.
    </description>
  </property>

  <property>
    <name>dfs.namenode.rpc-address</name>
    <value><%= @nn_address %>:<%= node['hops']['nn']['port'] %></value>
    <description>
      RPC address that handles all clients requests. In the case of HA/Federation where multiple namenodes exist,
      the name service id is added to the name e.g. dfs.namenode.rpc-address.ns1
      dfs.namenode.rpc-address.EXAMPLENAMESERVICE
      The value of this property will take the form of hdfs://nn-host1:rpc-port.
    </description>
  </property>

  <property>
    <name>dfs.namenode.http-address</name>
    <value><%= @nn_address %>:<%= node['hops']['nn']['http_port'] %></value>
    <description>The address and the base port where the dfs namenode web ui will listen on. </description>
  </property>

  <property>
    <name>dfs.client.max.retries.on.failure</name>
    <value>1</value>
  </property>

  <property>
    <name>dfs.client.block.write.locateFollowingBlock.retries</name>
    <value>10</value>
  </property>

  <!-- Do not modify this file directly.  Instead, copy entries that you -->
  <!-- wish to modify from this file into hdfs-site.xml and change them -->
  <!-- there.  If hdfs-site.xml does not already exist, create it.      -->

  <!-- <property> -->
  <!--   <name>hadoop.hdfs.configuration.version</name> -->
  <!--   <value>1</value> -->
  <!--   <description>version of this configuration file</description> -->
  <!-- </property> -->

  <property>
    <name>dfs.namenode.accesstime.precision</name>
    <value>3600000</value>
    <description>The access time for HDFS file is precise upto this value.
    The default value is 1 hour. Setting a value of 0 disables
    access times for HDFS.
    </description>
  </property>


  <property>
    <name>dfs.namenode.handler.count</name>
    <value><%= node['hops']['nn']['handler_count'] %></value>
    <description>The RPC server that listens to requests from clients</description>
  </property>

  <!-- <property> -->
  <!--    <name>dfs.namenode.service.handler.count</name> -->
  <!--   <value>10</value> -->
  <!--   <description>The RPC server threads that listens to requests from DataNodes</description> -->
  <!-- </property> -->

  <!-- <property> -->
  <!--   <name>dfs.datanode.data.dir</name> -->
  <!--   <value>file://<%= node['hops']['dn']['data_dir'] %></value> -->
  <!--   <description>Determines where on the local filesystem an DFS data node should store its blocks.  If this is a comma-delimited -->
  <!--   list of directories, then data will be storned in all named  directories, typically on different devices. Directories that do not exist are ignored. -->
  <!--   </description> -->
  <!-- </property> -->

  <property>
    <name>dfs.namenode.inodeid.batchsize</name>
    <value><%= node['hops']['dfs']['inodeid']['batchsize'] %></value>
    <description></description>
  </property>

  <property>
    <name>dfs.namenode.blockid.batchsize</name>
    <value><%= node['hops']['dfs']['blockid']['batchsize'] %></value>
    <description></description>
  </property>

  <property>
    <name>dfs.blocksize</name>
    <value><%= node['hops']['hdfs']['blocksize'] %></value>
    <description>
        The default block size for new files, in bytes.
        You can use the following suffix (case insensitive):
        k(kilo), m(mega), g(giga), t(tera), p(peta), e(exa) to specify the size (such as 128k, 512m, 1g, etc.),
        Or provide complete size in bytes (such as 134217728 for 128 MB).
    </description>
  </property>

  <property>
    <name>dfs.namenode.fs-limits.max-blocks-per-file</name>
    <value><%= node['hops']['hdfs']['max-blocks-per-file'] %></value>
    <description>
       Max blocks per file
    </description>
  </property>

  <property>
    <name>dfs.namenode.fs-limits.max-directory-items</name>
    <value><%= node['hops']['hdfs']['max-directory-items'] %></value>
    <description>
       Max immediate descendants of a directory 
    </description>
  </property>

  <property>
    <name>dfs.client.block.write.replace-datanode-on-failure.enable</name>
    <value><%= node['hops']['nn']['replace-dn-on-failure'] %></value>
    <description>
      If there is a datanode/network failure in the write pipeline,
      DFSClient will try to remove the failed datanode from the pipeline
      and then continue writing with the remaining datanodes. As a result,
      the number of datanodes in the pipeline is decreased. The feature is
      to add new datanodes to the pipeline.

      This is a site-wide property to enable/disable the feature.

      When the cluster size is extremely small, e.g. 3 nodes or less, cluster
      administrators may want to set the policy to NEVER in the default
      configuration file or disable this feature. Otherwise, users may
      experience an unusually high rate of pipeline failures since it is
      impossible to find new datanodes for replacement.

      See also dfs.client.block.write.replace-datanode-on-failure.policy
    </description>
  </property>

  <property>
    <name>dfs.client.block.write.replace-datanode-on-failure.policy</name>
    <value><%= node['hops']['nn']['replace-dn-on-failure-policy'] %></value>
    <description>
      This property is used only if the value of
      dfs.client.block.write.replace-datanode-on-failure.enable is true.

      ALWAYS: always add a new datanode when an existing datanode is removed.

      NEVER: never add a new datanode.

      DEFAULT:
      Let r be the replication number.
      Let n be the number of existing datanodes.
      Add a new datanode only if r is greater than or equal to 3 and either
      (1) floor(r/2) is greater than or equal to n; or
      (2) r is greater than n and the block is hflushed/appended.
    </description>
  </property>

  <property>
    <name>dfs.client.refresh.namenode.list</name>
    <value>60000</value>
    <description>Time in ms</description>
  </property>


  <property>
    <name>dfs.namenode.name.dir</name>
    <value><%= node['hops']['nn']['name_dir'] %></value>
  </property>

  <property>
    <name>dfs.datanode.data.dir</name>
    <value><%= node['hops']['dn']['data_dir'] %></value>
  </property>

  <property>
    <name>dfs.datanode.data.dir.perm</name>
    <value><%= node['hops']['dn']['data_dir_permissions'] %></value>
  </property>

  <property>
    <name>dfs.namenode.safemode.extension</name>
    <value>30000</value>
    <description>
      Determines extension of safe mode in milliseconds
      after the threshold level is reached.
    </description>
  </property>

  <property>
    <name>dfs.namenode.processReport.batchsize</name>
    <value><%= node['hops']['dfs']['processReport']['batchsize'] %></value>
    <description>This is the number of blocks to be processed in one transaction.
    Higher values can result in higher throughput, but too high values can cause transactions to fail.
    </description>
  </property>

  <property>
    <name>dfs.namenode.misreplicated.batchsize</name>
    <value><%= node['hops']['dfs']['misreplicated']['batchsize'] %></value>
    <description>

    </description>
  </property>

  <property>
    <name>dfs.namenode.misreplicated.noofbatches</name>
    <value><%= node['hops']['dfs']['misreplicated']['noofbatches'] %></value>
    <description>
    </description>
  </property>

  <property>
    <name>dfs.namenode.selector-policy</name>
    <value>RANDOM_STICKY</value>
    <description>Used by clients. Possible values ROUND_ROBIN, RANDOM, RANDOM_STICKY</description>
  </property>


  <property>
    <name>dfs.resolvingcache.memcache.connectionpool.size</name>
    <value>10</value>
    <description>should be same size as rpc threaads</description>
  </property>

  <property>
    <name>dfs.resolvingcache.enabled</name>
    <value><%= node['hops']['nn']['cache'] %></value>
    <description></description>
  </property>

  <property>
    <name>dfs.resolvingcache.type</name>
    <value>InMemory</value>
    <description></description>
  </property>

  <property>
    <name>dfs.resolvingcache.inmemory.maxsize</name>
    <value>2000000</value>
    <description></description>
  </property>

  <property>
    <name>dfs.ndb.setpartitionkey.enabled</name>
    <value><%= node['hops']['nn']['partition_key'] %></value>
    <description></description>
  </property>

  <property>
    <name>dfs.ndb.setrandompartitionkey.enabled</name>
    <value>true</value>
    <description></description>
  </property>

  <property>
    <name>dfs.namenode.quota.enabled</name>
    <value><%= node['hops']['hdfs']['quota_enabled'] %></value>
    <description></description>
  </property>

  <property>
    <name>dfs.permissions.enabled</name>
    <value>true</value>
    <description></description>
  </property>

  <property>
    <name>fs.permissions.umask-mode</name>
    <value><%= node['hops']['hdfs']['umask'] %></value>
    <description></description>
  </property>


  <property>
    <name>dfs.ndc.enable</name>
    <value>false</value>
    <description></description>
  </property>

  <property>
    <name>dfs.transaction.stats.enabled</name>
    <value>false</value>
    <description></description>
  </property>

  <property>
    <name>dfs.transaction.stats.detailed.enabled</name>
    <value>false</value>
    <description></description>
  </property>

  <property>
    <name>dfs.transaction.stats.writerround</name>
    <value>30</value>
    <description></description>
  </property>

  <property>
    <name>dfs.transaction.stats.dir</name>
    <value>/tmp/hopsstats</value>
    <description></description>
  </property>

  <property>
    <name>dfs.heartbeat.interval</name>
    <value>3</value>
    <description></description>
  </property>

  <!-- Enable erasure coding to test all code paths -->

  <property>
    <name>dfs.erasure_coding.enabled</name>
    <value><%= node['hops']['erasure_coding'] %></value>
    <description>Enable erasure coding</description>
  </property>

  <property>
     <name>dfs.webhdfs.enabled</name>
     <value>true</value>
  </property>


  <property>
    <name>dfs.permissions.superusergroup</name>
    <value><%= node['hops']['hdfs']['user'] %></value>
    <description>The group for hdfs superusers</description>
  </property>


<!--
  <property>
    <name>dfs.namenode.datanode.registration.ip-hostname-check</name>
    <value><%= node['hops']['reverse_dns_lookup_supported'] %></value>
  </property>

  <property>
    <name>dfs.client.read.shortcircuit</name>
    <value>true</value>
  </property>
  <property>
    <name>dfs.domain.socket.path</name>
    <value><%= node['hops']['tmp_dir'] %>/dn_socket</value>
  </property>

-->

<!-- SSL -->
<!-- Secure webhdfs by requiring TLS two-way authentication, port
     50070 should be firewalled -->
<% if node['hops']['tls']['enabled'].eql? "true" -%>
<property>
  <name>dfs.https.enable</name>
  <value><%= node['hops']['dfs']['https']['enable'] %></value>
</property>

<property>
  <name>dfs.http.policy</name>
  <value><%= node['hops']['dfs']['http']['policy'] %></value>
</property>

<property>
  <name>dfs.namenode.https-address</name>
  <value><%= @nn_address %>:<%= node['hops']['nn']['https']['port'] %></value>
  <description>The address and the base port where the dfs namenode web ui will listen on. </description>
</property>

<property>
  <name>dfs.datanode.https.address</name>
  <value><%= node['hops']['dn']['https']['address'] %></value>
</property>

<property>
  <name>dfs.client.https.need-auth</name>
  <value>true</value>
</property>

<property>
  <name>dfs.security-actions.actor-class</name>
  <value><%= node['hops']['fs-security-actions']['actor_class'] %></value>
</property>

<property>
  <name>dfs.security-actions.x509.get-path</name>
  <value><%= node['hops']['fs-security-actions']['x509']['get-path'] %></value>
</property>
<% end %>

<!-- Store Small Files in NDB-->

<property>
   <name>dfs.store.small.files.in.db</name>
   <value><%= node['hops']['small_files']['store_in_db'] %></value>
</property>

<property>
   <name>dfs.db.file.max.size</name>
   <value><%= node['hops']['small_files']['max_size'] %></value>
</property>

<property>
   <name>dfs.db.ondisk.small.file.max.size</name>
   <value><%= node['hops']['small_files']['on_disk']['max_size']['small']  %></value>
</property>

<property>
   <name>dfs.db.ondisk.medium.file.max.size</name>
   <value><%= node['hops']['small_files']['on_disk']['max_size']['medium']  %></value>
</property>

<property>
   <name>dfs.db.ondisk.large.file.max.size</name>
   <value><%= node['hops']['small_files']['on_disk']['max_size']['large'] %></value>
</property>

<property>
   <name>dfs.db.inmemory.file.max.size</name>
   <value><%= node['hops']['small_files']['in_memory']['max_size'] %></value>
</property>

<property>
   <name>dfs.encrypt.data.transfer</name>
   <value><%= node['hops']['encrypt_data_transfer']['enabled'] %></value>
</property>

<property>
   <name>dfs.encrypt.data.transfer.algorithm</name>
   <value><%= node['hops']['encrypt_data_transfer']['algorithm'] %></value>
</property>

<!-- Block tokens should be enabled when data transfer is encrypted -->
<property>
   <name>dfs.block.access.token.enable</name>
   <value><%= node['hops']['encrypt_data_transfer']['enabled'] %></value>
</property>

<property>
   <name>dfs.namenode.enable.retrycache</name>
   <value><%= node['hops']['nn']['enable_retrycache'] %></value>
</property>

<property>
   <name>dfs.locationDomainId</name>
   <value><%= @location_domain_id %></value>
</property>

<property>
  <name>dfs.hosts.exclude</name>
  <value><%= node['hops']['conf_dir'] %>/dfs.exclude</value>
</property>

<property>
   <name>dfs.datanode.balance.max.concurrent.moves</name>
   <value><%= node['hops']['dfs']['balance']['max_concurrent_moves'] %></value>
</property>

<property>
   <name>dfs.mover.retry.max.attempts</name>
   <value><%= node['hops']['dfs']['mover']['retry_max_attempts'] %></value>
</property>

<property>
   <name>dfs.namenode.replication.max-streams</name>
   <value><%= node['hops']['dfs']['replication']['max_streams'] %></value>
</property>

<property>
   <name>dfs.namenode.replication.max-streams-hard-limit</name>
   <value><%= node['hops']['dfs']['replication']['max_streams_hard_limit'] %></value>
</property>

<property>
   <name>dfs.namenode.replication.work.multiplier.per.iteration</name>
   <value><%= node['hops']['dfs']['replication']['work_multiplier_per_iteration'] %></value>
</property>

<property>
   <name>dfs.enable.cloud.persistence</name>
   <value><%= node['hops']['enable_cloud_storage'] %></value>
</property>

<property>
   <name>dfs.cloud.provider</name>
   <value><%= node['hops']['cloud_provider'] %></value>
   <description>Cloud provider. Currently only AWS is supported</description>
</property>

<property>
   <name>dfs.cloud.aws.s3.bucket</name>
   <value><%= node['hops']['aws_s3_bucket'] %></value>
   <description>Hopsfs S3 bucket used to store file system blocks</description>
</property>

<property>
   <name>dfs.cloud.aws.s3.region</name>
   <value><%= node['hops']['aws_s3_region'] %></value>
   <description>AWS Region for file system buckets</description>
</property>

<property>
   <name>dfs.dn.cloud.bypass.cache</name>
   <value><%= node['hops']['cloud_bypass_disk_cache'] %></value>
   <description></description>
</property>

<property>
   <name>dfs.dn.cloud.max.upload.threads</name>
   <value><%= node['hops']['cloud_max_upload_threads'] %></value>
   <description></description>
</property>

<property>
   <name>dfs.cloud.store.small.files.in.db</name>
   <value><%= node['hops']['cloud_store_small_files_in_db'] %></value>
   <description></description>
</property>

<property>
   <name>dfs.cloud.concurrent.upload</name>
   <value>true</value>
   <description>Upload file block to s3 using multipart API</description>
</property>

<property>
   <name>dfs.datanode.ipc.address</name>
   <value><%= @bind_ip %>:<%= node['hops']['dn']['ipc_port'] %></value>
   <description>The datanode ipc server address and port. </description>
</property>

<property>
   <name>dfs.datanode.address</name>
   <value><%= @bind_ip %>:<%= node['hops']['dn']['port'] %></value>
   <description>The datanode server address and port for data transfer.</description>
</property>

  <property>
    <name>dfs.namenode.xattrs.enabled</name>
    <value><%= node['hops']['xattrs']['enabled'] %></value>
    <description>
      Whether support for extended attributes is enabled on the NameNode.
    </description>
  </property>

  <property>
    <name>dfs.namenode.fs-limits.max-xattrs-per-inode</name>
    <value><%= node['hops']['xattrs']['max-xattrs-per-inode'] %></value>
    <description>
      Maximum number of extended attributes per inode. The maximum allowed
      number is 127 extended attributes per inode.
    </description>
  </property>

  <property>
    <name>dfs.namenode.fs-limits.max-xattr-size</name>
    <value><%= node['hops']['xattrs']['max-xattr-size'] %></value>
    <description>
      The maximum combined size of the name and value of an extended
      attribute in bytes. It should be larger than 0 and less than or equal
      to the maximum size (hard limit), which is 3442755. By default, this limit
      is 13755 bytes, where the name can take up to 255 bytes, and the value
      size can take up to 13500 bytes.
    </description>
  </property>
  
  <property>
    <name>dfs.namenode.acls.enabled</name>
    <value><%= node['hops']['acl']['enabled'] %></value>
    <description></description>
  </property>

  <property>
    <name>dfs.namenode.subtree-executor-limit</name>
    <value><%= node['hops']['nn']['subtree-executor-limit'] %></value>
    <description></description>
  </property>

  <property>
    <name>dfs.db.replication</name>
    <value><%= node['ndb']['NoOfReplicas'] %></value>
    <description>Number of replicas configured in the NDB cluster.</description>
  </property>

  <property>
    <name>dfs.disable.non.cloud.storage.policies</name>
    <value><%= node['hops']['disable_non_cloud_storage_policies'] %></value>
    <description>
      Enable/Disable non cloud storage policies. 
      This parameter is only effective if 
      dfs.enable.cloud.persistence is set to true.
    </description>
  </property>

  <property>
    <name>dfs.namenode.subtree-executor-limit</name>
    <value><%= node['hops']['nn']['tx_retry_count'] %></value>
    <description>
      Number of times a transaction must be retried
      if it fails due to transient database exceptions.
    </description>
  </property>

  <property>
    <name>dfs.cloud.max.br.threads</name>
    <value><%= node['hops']['nn']['cloud_max_br_threads'] %></value>
    <description>
     Number of threads used by block reporting system for provided blocks
    </description>
  </property>

</configuration>
